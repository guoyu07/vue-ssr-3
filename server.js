process.env.VUE_ENV = 'server';
const isProd = process.env.NODE_ENV === 'production';

const fs = require('fs');
const path = require('path');
const express = require('express');
const compression = require('compression');
const serialize = require('serialize-javascript');
const resolve = file => path.resolve(__dirname, file);

const app = express();

let indexHTML; // generated by html-webpack-plugin
let renderer; // created from the webpack-generated server bundle
if (isProd) {
    // in production: create server renderer and index HTML from real fs
    renderer = createRenderer(fs.readFileSync(resolve('./dist/server-bundle.js'), 'utf-8'));
    indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'));
} else {
    // in development: setup the dev server with watch and hot-reload,
    // and update renderer / index HTML on file change.
    require('./build/setup-dev-server')(app, {
        // 服务端
        bundleUpdated: bundle => {
            renderer = createRenderer(bundle);
        },
        // 客户端
        indexUpdated: index => {
            indexHTML = parseIndex(index);
        }
    })
}

function createRenderer(bundle) {
    // https://github.com/vuejs/vue/blob/next/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return require('vue-server-renderer').createBundleRenderer(bundle, {
        cache: require('lru-cache')({
            max: 1000,
            maxAge: 1000 * 60 * 15
        })
    });
}

function parseIndex(template) {
    const contentMarker = '<!-- APP -->'
    const i = template.indexOf(contentMarker)
    return {
        head: template.slice(0, i),
        tail: template.slice(i + contentMarker.length)
    }
}

const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use('/dist', serve('./dist'))

// 处理所有的get请求
app.get('*', (req, res) => {
    // 等待编译
    if (!renderer) {
        return res.end('waiting for compilation... refresh in a moment.')
    }

    res.setHeader("Content-Type", "text/html");
    var s = Date.now()
    const context = { url: req.url }
    // 渲染我们的Vue实例作为流
    const renderStream = renderer.renderToStream(context)

    // 当块第一次被渲染时
    renderStream.once('data', () => {
        // 将预先的HTML写入响应
        res.write(indexHTML.head)
    })

    // 每当新的块被渲染
    renderStream.on('data', chunk => {
  	    // 将块写入响应
        res.write(chunk);
    });

    // 当所有的块被渲染完成
    renderStream.on('end', () => {
        // 当vuex初始状态存在
        if (context.initialState) {
        	// 将vuex初始状态以script的方式写入到页面中
            res.write(
                `<script>window.__INITIAL_STATE__=${
                    serialize(context.initialState, { isJSON: true })
                }</script>`
            );
        }

        // 将结尾的HTML写入响应
        res.end(indexHTML.tail);
        console.log(`whole request: ${Date.now() - s}ms`)
    });

    // 当渲染时发生错误
    renderStream.on('error', err => {
        if (err && err.code === '404') {
            res.status(404).end('404 | Page Not Found');
            return;
        }
        res.status(500).end('Internal Error 500');
        console.error(`error during render : ${req.url}`)
        console.error(err)
    });
})

const port = process.env.PORT || 8080
app.listen(port, () => {
    console.log(`server started at localhost:${port}`)
})
